#include <vector>	
#include <queue>
#include <unordered_map>

class Solution
{
public:
	int minMalwareSpread(std::vector<std::vector<int>>& graph, std::vector<int>& initial)
	{
		int n = graph.size();		// number of nodes
		std::vector<int> ids(n);
		int id = 0;
		std::unordered_map<int, int> idsSize;

		for (int i = 0; i < n; ++i)
		{
			if (!ids[i])
			{
				++id;
				int size = 1;
				std::queue<int> idQueue;
				idQueue.push(i);
				ids[i] = id;
				while (!idQueue.empty())
				{
					int u = idQueue.front();
					idQueue.pop();
					for (int v = 0; v < n; ++v)
					{
						if (!ids[v] && graph[u][v] == 1)
						{
							// lian tong
							++size;
							idQueue.push(v);
							ids[v] = id;
						}
					}
				}
				idsSize[id] = size;
			}
		}

		std::unordered_map<int, int> id_initial;
		for (int u : initial)
		{
			++id_initial[ids[u]];
		}

		int ans = n + 1, ansRemoved = 0;
		for (int u : initial)
		{
			int removed = (id_initial[ids[u]] == 1 ? idsSize[ids[u]] : 0);
			if (removed > ansRemoved || (removed == ansRemoved && u < ans))
			{
				ans = u;
				ansRemoved = removed;
			}
		}
		return ans;
	}
};