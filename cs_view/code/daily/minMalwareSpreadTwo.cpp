#include <iostream>	
#include <vector>
#include <unordered_map>	
#include <queue>	

/*
	NOT_FIN
*/

class Solution

{
public:
	int minMalwareSpread(std::vector<std::vector<int>>& graph, std::vector<int>& initial)
	{
		int n = graph.size();
		std::vector<int> initialSet(n, 0);
		for (int i : initial)
		{
			initialSet[i] = 1;
		}

		std::vector<std::vector<int>> infectedBy(n);
		for (int v : initial)
		{
			std::vector<int> infectedSet(n);
			dfs(graph, initialSet, infectedSet, v);
			for (int u = 0; u < n; ++u)
			{
				if (infectedSet[u] == 1)
				{
					infectedBy[u].push_back(v);
				}
			}
		}

	}

private:
	void dfs(std::vector<std::vector<int>>& graph, std::vector<int>& initialSet,
		std::vector<int>& infectedSet, int v)
	{
		int n = graph.size();
		for (int i = 0; i < n; ++i)
		{
			if (graph[i][v] == 0 || initialSet[i] == 1 || infectedSet[i] == 1)
			{
				continue;
			}
			infectedSet[i] = 1;
			dfs(graph, initialSet, infectedSet, i);
		}
	}
};